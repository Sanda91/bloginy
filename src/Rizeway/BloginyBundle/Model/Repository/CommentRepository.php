<?php

/**
  *  Bloginy, Blog Aggregator
  *  Copyright (C) 2012  Riad Benguella - Rizeway
  *
  *  This program is free software: you can redistribute it and/or modify
  *
  *  it under the terms of the GNU General Public License as published by
  *  the Free Software Foundation, either version 3 of the License, or
  *  any later version.
  *
  *  This program is distributed in the hope that it will be useful,
  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  *  You should have received a copy of the GNU General Public License
  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Rizeway\BloginyBundle\Model\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

use Rizeway\UserBundle\Entity\User;
use Rizeway\BloginyBundle\Entity\Post;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
    const FILTER_APPROVED = 'approved';
    const FILTER_WAITING  = 'waiting';

    /**
     * find the comments for a user and a filter a
     *
     * @param User $user
     * @param string $filter
     * @param integer $page
     * @param integer $max_results
     * @return Rizeway\BloginyBundle\Entity\Comment[]
     */
    public function findForUserModeration(User $user, $filter = 'none', $page = 1, $max_results = null)
    {
        if (!in_array(User::ROLE_ADMIN_USER, $user->getRoles()))
        {
            $qb = $this->getUserModerationQueryBuilder($user);
        }
        $qb = $this->getFilterQueryBuilder($filter, $qb);

        $qb->addOrderBy('comment.created_at', 'DESC');

        return $this->findForQueryBuilder($page, $max_results, $qb);
    }
    
    /**
     *
     * @param Post $post
     * @return Rizeway\BloginyBundle\Entity\Comment[]
     */
    public function findForPost(Post $post)
    {
        $qb = $this->getApprovedQueryBuilder(1);
        $qb = $this->getPostQueryBuilder($post, $qb);
        
        $qb->addOrderBy('comment.created_at', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     *
     * @param integer $page
     * @param integer $max_results
     * @param QueryBuilder $qb
     * @return Rizeway\BloginyBundle\Entity\Comment[]
     */
    public function findForQueryBuilder($page = 1, $max_results = null, QueryBuilder $qb = null)
    {
        $qb = is_null($qb) ? $this->getBaseQueryBuilder() : $qb;

        $query = $qb->getQuery();
        if (!is_null($max_results)) {
            $query->setMaxResults($max_results);
            $query->setFirstResult(($page - 1) * $max_results);
        }
        return $query->getResult();
    }
    
    
    /**
     * Get the queryBuilder by adding the user moderation filter
     * 
     * @param User $user
     * @param QueryBuilder $qb
     * @return QueryBuilder
     */
    protected function getUserModerationQueryBuilder(User $user, QueryBuilder $qb = null)
    {
        $qb = is_null($qb) ? $this->getBaseQueryBuilder() : $qb;

        $where = is_null($qb->getDQLPart('where')) ? 'where' : 'andWhere';
        $qb->$where('post.user = :user')
           ->setParameter('user', $user->getId());

        return $qb;
    }
    
    /**
     * Get The queryBuilder by adding the post filter
     *
     * @param Post $post
     * @param QueryBuilder $qb
     * @return QueryBuilder
     */
    protected function getPostQueryBuilder(Post $post, QueryBuilder $qb = null)
    {
        $qb = is_null($qb) ? $this->getBaseQueryBuilder() : $qb;

        $where = is_null($qb->getDQLPart('where')) ? 'where' : 'andWhere';
        $qb->$where('comment.post = :post')
           ->setParameter('post', $post->getId());

        return $qb;
    }
    
    /**
     * Get the query builder by applying a filter
     * @param type $filter
     * @param QueryBuilder $qb
     * @return QueryBuilder
     */
    protected function getFilterQueryBuilder($filter = 'none', QueryBuilder $qb = null)
    {
        $qb = is_null($qb) ? $this->getBaseQueryBuilder() : $qb;

        switch ($filter) {
            case self::FILTER_APPROVED :
                return $this->getApprovedQueryBuilder(1, $qb);
            case self::FILTER_WAITING :
                return $this->getApprovedQueryBuilder(0, $qb);
            case 'none' :
                return $qb;
            default:
                throw new \Exception('Filter Type Unknown');
        }
    }
    
    
    /**
     * Get the query builder for approved filter
     *
     * @param bool $approved
     * @param QueryBuilder $qb
     * @return QueryBuilder
     */
    public function getApprovedQueryBuilder($approved = 1, QueryBuilder $qb = null)
    {
        $qb = is_null($qb) ? $this->getBaseQueryBuilder() : $qb;
        $where = is_null($qb->getDQLPart('where')) ? 'where' : 'andWhere';
        $qb->$where('comment.approved = :approved');
        $qb->setParameter('approved', $approved);
        
        return $qb;
    }
    
    /**
    * Get the base query builder
    * @return QueryBuilder
    */
    protected function getBaseQueryBuilder()
    {
        $qb = $this->_em->createQueryBuilder()
          ->select('comment, post, user')
          ->from('BloginyBundle:Comment', 'comment')
          ->join('comment.post', 'post')
          ->leftJoin('comment.user', 'user');
        
        return $qb;
    }

}
